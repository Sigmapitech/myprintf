#ifndef PRINTF_TABLE_H
    #define PRINTF_TABLE_H

    #define CMP_PRINTF NULL

    #define MK_SCOPE(l, r, ...) l __VA_ARGS__ r
    #define STRUCT(...) MK_SCOPE({, }, __VA_ARGS__)

/* Utilities macro to defie test entries structure redundant fields. */
    #define TEST_CMP(f, e, a, t) STRUCT(f, e, &(union arg){a}, t)
    #define TEST_ENTRY(f, a, t) TEST_CMP(f, CMP_PRINTF, a, t)
    #define TEST_NO_ARG(f) TEST_ENTRY(f, .p = NULL, PTR)
    #define TEST_CMP_NO_ARG(f, e) TEST_CMP(f, e, .p = NULL, PTR)

/* Tests entries are meant to be part of the TESTS table from
 * `test_printf.c`.
 *
 * This header should not be imported otherwise!
 *
 * If tests_internal isn't defined, provide definition for the table.
 * This will help editors to understand what is going on.
 **/

    #ifndef TEST_INTERNAL_H
        #include "test_internal.h"

        #error "This header it meant to only be include within a array"

        #define WRAP_ENTRIES
    #endif

    #ifdef WRAP_ENTRIES
static const printf_test_t TESTS[] = {
    #endif

    // no argument
    TEST_NO_ARG("\n"),
    TEST_NO_ARG("Hello"),
    TEST_NO_ARG("%10%"),
    TEST_NO_ARG("%%"),
    TEST_NO_ARG("%#-0+ 6.3ll%"),
    TEST_NO_ARG(""),

    // %c
    TEST_ENTRY("%c", .c = '!', INT),

    // %s
    TEST_ENTRY("%s", .p = NULL, PTR),
    TEST_ENTRY("%s", .p = "Hello world", PTR),
    TEST_ENTRY("%8s", .p = "Hello!", PTR),
    TEST_ENTRY("%5.3s", .p = "Hello!", PTR),
    TEST_ENTRY("%.9s", .p = "Hey", PTR),
    TEST_ENTRY("%.3s", .p = "Hello!", PTR),
    TEST_ENTRY("%.2s", .p = NULL, PTR),
    TEST_ENTRY("%.0s", .p = NULL, PTR),
    TEST_ENTRY("%.0s", .p = "hey", PTR),
    TEST_ENTRY("%-8s", .p = "Hello!", PTR),

    // %u
    TEST_ENTRY("%u", .i = 5412, INT),
    TEST_ENTRY("%u", .i = 0, INT),
    TEST_ENTRY("%u", .i = -3, INT),
    TEST_ENTRY("%0+18ju", .l = LONG_MAX >> 11, LONG),
    TEST_ENTRY("%.2u", .i = 1, INT),
    TEST_ENTRY("%.12hhu", .l = INT_MAX, LONG),
    TEST_ENTRY("%-.2u", .i = 2, INT),
    TEST_ENTRY("%#u", .i = 692, INT),
    TEST_ENTRY("%#u", .i = 0, INT),
    TEST_ENTRY("%#.0u", .i = 4, INT),
    TEST_ENTRY("%#.0u", .i = 0, INT),

    // %d / %i
    TEST_ENTRY("%ld", .l = LONG_MAX, LONG),
    TEST_ENTRY("%d", .i = 42, INT),
    TEST_ENTRY("%d", .i = -3, INT),
    TEST_ENTRY("%9999999999d", .i = 0, INT),
    TEST_ENTRY("%5d", .i = 3301, INT),
    TEST_ENTRY("%3i", .i = -28, INT),
    TEST_ENTRY("%2147483648d", .i = 0, INT),
    TEST_ENTRY("%1.9999999999d", .i = 0, INT),
    TEST_ENTRY("%1.2147483648d", .i = 0, INT),
    TEST_ENTRY("%0d", .i = 3301, INT),
    TEST_ENTRY("%010d", .i = 3301, INT),
    TEST_ENTRY("%0.5hhd", .l = CHAR_MAX + 1, LONG),
    TEST_ENTRY("%0-10d", .i = 3301, INT),
    TEST_ENTRY("%.d", .i = 0, INT),
    TEST_ENTRY("%.1d", .i = 0, INT),
    TEST_ENTRY("%.11d", .i = 3890880, INT),
    TEST_ENTRY("%.0d", .i = 0, INT),
    TEST_ENTRY("%-8hd", .l = SHRT_MAX, LONG),
    TEST_ENTRY("%-5d", .i = 3301, INT),
    TEST_ENTRY("%-010d", .i = 3301, INT),
    TEST_ENTRY("%-.12jd", .l = LONG_MIN >> 11, LONG),
    TEST_ENTRY("%-.12d", .i = 50949, INT),
    TEST_ENTRY("%+lld", .l = LONG_MAX, LONG),
    TEST_ENTRY("%+5d", .i = 3301, INT),
    TEST_ENTRY("%+5d", .i = -42, INT),
    TEST_ENTRY("%+0.d", .i = 0, INT),
    TEST_ENTRY("%+.d", .i = 0, INT),
    TEST_ENTRY("%+.0d", .i = 0, INT),
    TEST_ENTRY("%+ d", .i = 123, INT),
    TEST_ENTRY("%+ 12d", .i = 123, INT),
    TEST_ENTRY("%#d", .i = 987, INT),
    TEST_ENTRY("%#-4.16ld", .l = LONG_MAX >> 13, LONG),
    TEST_ENTRY("%#-+4.16ld", .l = LONG_MAX >> 13, LONG),
    TEST_ENTRY("%# 0-4.16ld", .l = LONG_MAX >> 15, LONG),
    TEST_ENTRY("%# 0-+4.16zd", .l = LONG_MIN >> 15, LONG),
    TEST_ENTRY("%# 0-+4.16zd", .l = LONG_MAX >> 13, LONG),
    TEST_ENTRY("%# 0-+4.16ld", .l = LONG_MAX >> 15, LONG),
    TEST_ENTRY("% hd", .l = SHRT_MAX + 1, LONG),
    TEST_ENTRY("% d", .i = 3301, INT),
    TEST_ENTRY("% d", .i = -42, INT),
    TEST_ENTRY("% 5d", .i = 3301, INT),
    TEST_ENTRY("% 5d", .i = -42, INT),
    TEST_ENTRY("% .d", .i = 0, INT),
    TEST_ENTRY("% +d", .i = 0, INT),
    TEST_ENTRY("% #td", .l = LONG_MAX, LONG),

    // %p
    TEST_ENTRY("%p", .p = (const void *)&TESTS, PTR),

    // %o
    TEST_ENTRY("%o", .i = 3301, INT),
    TEST_ENTRY("%o", .i = 1234, INT),
    TEST_ENTRY("%o", .i = 57893, INT),
    TEST_ENTRY("%o", .i = 0, INT),
    TEST_ENTRY("%0llo", .l = ULLONG_MAX, LONG),
    TEST_ENTRY("%.6o", .i = 23, INT),
    TEST_ENTRY("%.0o", .i = 1, INT),
    TEST_ENTRY("%.0o", .i = 0, INT),
    TEST_ENTRY("%-zo", .l = LONG_MIN >> 11, LONG),
    TEST_ENTRY("%-8o", .i = 3890880, INT),
    TEST_ENTRY("%-0to", .l = LONG_MIN >> 3, LONG),
    TEST_ENTRY("%-.7o", .i = 100002, INT),
    TEST_ENTRY("%+5o", .i = 3301, INT),
    TEST_ENTRY("%+5o", .i = -42, INT),
    TEST_ENTRY("%+13lo", .l = LONG_MAX, LONG),
    TEST_ENTRY("%#o", .i = 0, INT),
    TEST_ENTRY("%#O", .i = 42, INT),
    TEST_ENTRY("%#015o", .i = 1, INT),
    TEST_ENTRY("%#+ho", .l = ULLONG_MAX, LONG),
    TEST_ENTRY("% o", .i = 3301, INT),
    TEST_ENTRY("% o", .i = -42, INT),
    TEST_ENTRY("%-10.2o", .i = 0, INT),
    TEST_ENTRY("%-10.2o", .i = 1, INT),
    TEST_ENTRY("%-10.2o", .i = -1, INT),
    TEST_ENTRY("%-10.2o", .i = INT_MIN, INT),
    TEST_ENTRY("%-10.2o", .i = INT_MAX, INT),

    // %x
    TEST_ENTRY("%x", .i = 3301, INT),
    TEST_ENTRY("%x", .i = 1234, INT),
    TEST_ENTRY("%X", .i = 57893, INT),
    TEST_ENTRY("%X", .i = 0, INT),
    TEST_ENTRY("%0llx", .l = ULLONG_MAX, LONG),
    TEST_ENTRY("%.6x", .i = 23, INT),
    TEST_ENTRY("%.0x", .i = 1, INT),
    TEST_ENTRY("%.0X", .i = 0, INT),
    TEST_ENTRY("%-zx", .l = LONG_MIN >> 11, LONG),
    TEST_ENTRY("%-8x", .i = 3890880, INT),
    TEST_ENTRY("%-0tX", .l = LONG_MIN >> 3, LONG),
    TEST_ENTRY("%-.7x", .i = 100002, INT),
    TEST_ENTRY("%+5x", .i = 3301, INT),
    TEST_ENTRY("%+5x", .i = -42, INT),
    TEST_ENTRY("%+13lx", .l = LONG_MAX, LONG),
    TEST_ENTRY("%#x", .i = 0, INT),
    TEST_ENTRY("%#X", .i = 42, INT),
    TEST_ENTRY("%#015x", .i = 1, INT),
    TEST_ENTRY("%#+hx", .l = ULLONG_MAX, LONG),
    TEST_ENTRY("% x", .i = 3301, INT),
    TEST_ENTRY("% x", .i = -42, INT),
    TEST_ENTRY("%-10.2x", .i = 0, INT),
    TEST_ENTRY("%-10.2x", .i = 1, INT),
    TEST_ENTRY("%-10.2x", .i = -1, INT),
    TEST_ENTRY("%-10.2x", .i = INT_MIN, INT),
    TEST_ENTRY("%-10.2x", .i = INT_MAX, INT),

    // %b
    TEST_ENTRY("%b", .i = 3301, INT),
    TEST_ENTRY("%B", .i = 1234, INT),
    TEST_ENTRY("%B", .i = 57893, INT),
    TEST_ENTRY("%b", .i = 0, INT),
    TEST_ENTRY("%0llb", .l = ULLONG_MAX, LONG),
    TEST_ENTRY("%.6b", .i = 23, INT),
    TEST_ENTRY("%.0b", .i = 1, INT),
    TEST_ENTRY("%.0B", .i = 0, INT),
    TEST_ENTRY("%-zB", .l = LONG_MIN >> 11, LONG),
    TEST_ENTRY("%-8b", .i = 3890880, INT),
    TEST_ENTRY("%-0tB", .l = LONG_MIN >> 3, LONG),
    TEST_ENTRY("%-.7b", .i = 100002, INT),
    TEST_ENTRY("%+5b", .i = 3301, INT),
    TEST_ENTRY("%+5B", .i = -42, INT),
    TEST_ENTRY("%+13lB", .l = LONG_MAX, LONG),
    TEST_ENTRY("%#b", .i = 0, INT),
    TEST_ENTRY("%#B", .i = 42, INT),
    TEST_ENTRY("%#015b", .i = 1, INT),
    TEST_ENTRY("%#+hb", .l = ULLONG_MAX, LONG),
    TEST_ENTRY("% B", .i = 3301, INT),
    TEST_ENTRY("% b", .i = -42, INT),
    TEST_ENTRY("%-10.2b", .i = 0, INT),
    TEST_ENTRY("%-10.2B", .i = 1, INT),
    TEST_ENTRY("%-10.2b", .i = -1, INT),
    TEST_ENTRY("%-10.2b", .i = INT_MIN, INT),
    TEST_ENTRY("%-10.2B", .i = INT_MAX, INT),

    // %f
    TEST_ENTRY("%f", .d = NAN, DOUBLE),
    TEST_ENTRY("%f", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%f", .d = 123.0, DOUBLE),
    TEST_ENTRY("%f", .d = 0.456, DOUBLE),
    TEST_ENTRY("%f", .d = 0, DOUBLE),
    TEST_ENTRY("%f", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%f", .d = -123.0, DOUBLE),
    TEST_ENTRY("%f", .d = -0.456, DOUBLE),
    TEST_ENTRY("%F", .d = NAN, DOUBLE),
    TEST_ENTRY("%F", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%F", .d = 123.456, DOUBLE),
    TEST_ENTRY("%F", .d = 123.0, DOUBLE),
    TEST_ENTRY("%F", .d = 0.456, DOUBLE),
    TEST_ENTRY("%F", .d = 0, DOUBLE),
    TEST_ENTRY("%F", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%F", .d = -123.456, DOUBLE),
    TEST_ENTRY("%F", .d = -123.0, DOUBLE),
    TEST_ENTRY("%8f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%8f", .d = 0, DOUBLE),
    TEST_ENTRY("%8f", .d = 0, DOUBLE),
    TEST_ENTRY("%0f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0f", .d = 0, DOUBLE),
    TEST_ENTRY("%08f", .d = NAN, DOUBLE),
    TEST_ENTRY("%08f", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%08f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%08f", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%08f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%08.6f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%08.3f", .d = 3.14, DOUBLE),
    TEST_ENTRY("%08.0f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0-8f", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%0-8f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0-8f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0-8f", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%0-8f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%0-8.6f", .d = NAN, DOUBLE),
    TEST_ENTRY("%0-8.6f", .d = 0, DOUBLE),
    TEST_ENTRY("%0-8.0f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%.6f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%.6f", .d = 123.0, DOUBLE),
    TEST_ENTRY("%.6f", .d = 0.000919999, DOUBLE),
    TEST_ENTRY("%.6f", .d = 0, DOUBLE),
    TEST_ENTRY("%.1f", .d = 3.14, DOUBLE),
    TEST_ENTRY("%.1f", .d = 123.49, DOUBLE),
    TEST_ENTRY("%.0f", .d = 123.9, DOUBLE),
    TEST_ENTRY("%.0f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%.0f", .d = 123.0, DOUBLE),
    TEST_ENTRY("%.0f", .d = -0, DOUBLE),
    TEST_ENTRY("%-8f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%-5.3f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%-0f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%-0f", .d = 0, DOUBLE),
    TEST_ENTRY("%-+ #08.6f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%-+ #08.6f", .d = 123.0, DOUBLE),
    TEST_ENTRY("%-+ #08.6f", .d = 0.456, DOUBLE),
    TEST_ENTRY("%-+ #08.6f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%-+ #08.6f", .d = -123.0, DOUBLE),
    TEST_ENTRY("%-+ #08.6f", .d = -0.456, DOUBLE),
    TEST_ENTRY("%- #08.6f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%- #08.6f", .d = 123.0, DOUBLE),
    TEST_ENTRY("%- #08.6f", .d = 0.456, DOUBLE),
    TEST_ENTRY("%- #08.6f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%- #08.6f", .d = -123.0, DOUBLE),
    TEST_ENTRY("%- #08.6f", .d = -0.456, DOUBLE),
    TEST_ENTRY("%+f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%+f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%+f", .d = 0, DOUBLE),
    TEST_ENTRY("%+f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%+f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%+ f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%#f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%#f", .d = 123.0, DOUBLE),
    TEST_ENTRY("%#f", .d = 0, DOUBLE),
    TEST_ENTRY("%#0- 5.2f", .d = -123.456, DOUBLE),
    TEST_ENTRY("%#.0f", .d = 123.456, DOUBLE),
    TEST_ENTRY("%#.0f", .d = 123.0, DOUBLE),
    TEST_ENTRY("%#.0f", .d = 0, DOUBLE),
    TEST_ENTRY("%#.0f", .d = -69, DOUBLE),
    TEST_ENTRY("% f", .d = 123.456, DOUBLE),
    TEST_ENTRY("% f", .d = 123.456, DOUBLE),
    TEST_ENTRY("% f", .d = 0, DOUBLE),
    TEST_ENTRY("% f", .d = -123.456, DOUBLE),
    TEST_ENTRY("% +f", .d = 123.456, DOUBLE),
    TEST_ENTRY("% +f", .d = 0, DOUBLE),
    TEST_ENTRY("% +f", .d = -123.456, DOUBLE),

    // %e
    TEST_ENTRY("%e", .d = NAN, DOUBLE),
    TEST_ENTRY("%e", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%e", .d = 123.0, DOUBLE),
    TEST_ENTRY("%e", .d = 0.456, DOUBLE),
    TEST_ENTRY("%e", .d = 0, DOUBLE),
    TEST_ENTRY("%e", .d = 1.0, DOUBLE),
    TEST_ENTRY("%e", .d = 8.7, DOUBLE),
    TEST_ENTRY("%e", .d = 71.27, DOUBLE),
    TEST_ENTRY("%e", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%e", .d = -123.0, DOUBLE),
    TEST_ENTRY("%e", .d = -0.456, DOUBLE),
    TEST_ENTRY("%E", .d = NAN, DOUBLE),
    TEST_ENTRY("%E", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%E", .d = 123.456, DOUBLE),
    TEST_ENTRY("%E", .d = 123.0, DOUBLE),
    TEST_ENTRY("%E", .d = 0.456, DOUBLE),
    TEST_ENTRY("%E", .d = 0, DOUBLE),
    TEST_ENTRY("%E", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%E", .d = -123.456, DOUBLE),
    TEST_ENTRY("%E", .d = -123.0, DOUBLE),
    TEST_ENTRY("%8e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%8e", .d = 0, DOUBLE),
    TEST_ENTRY("%8e", .d = 0, DOUBLE),
    TEST_ENTRY("%0e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0e", .d = 0, DOUBLE),
    TEST_ENTRY("%08e", .d = NAN, DOUBLE),
    TEST_ENTRY("%08e", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%08e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%08e", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%08e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%08.6e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%08.3e", .d = 3.14, DOUBLE),
    TEST_ENTRY("%08.0e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0-8e", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%0-8e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0-8e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%0-8e", .d = -INFINITY, DOUBLE),
    TEST_ENTRY("%0-8e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%0-8.6e", .d = NAN, DOUBLE),
    TEST_ENTRY("%0-8.6e", .d = 0, DOUBLE),
    TEST_ENTRY("%0-8.0e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%.6e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%.6e", .d = 123.0, DOUBLE),
    TEST_ENTRY("%.6e", .d = 0.000919999, DOUBLE),
    TEST_ENTRY("%.6e", .d = 0, DOUBLE),
    TEST_ENTRY("%.1e", .d = 3.14, DOUBLE),
    TEST_ENTRY("%.1e", .d = 123.49, DOUBLE),
    TEST_ENTRY("%.0e", .d = 123.9, DOUBLE),
    TEST_ENTRY("%.0e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%.0e", .d = 123.0, DOUBLE),
    TEST_ENTRY("%.0e", .d = -0, DOUBLE),
    TEST_ENTRY("%-8e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%-5.3e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%-0e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%-0e", .d = 0, DOUBLE),
    TEST_ENTRY("%-+ #08.6e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%-+ #08.6e", .d = 123.0, DOUBLE),
    TEST_ENTRY("%-+ #08.6e", .d = 0.456, DOUBLE),
    TEST_ENTRY("%-+ #08.6e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%-+ #08.6e", .d = -123.0, DOUBLE),
    TEST_ENTRY("%-+ #08.6e", .d = -0.456, DOUBLE),
    TEST_ENTRY("%- #08.6e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%- #08.6e", .d = 123.0, DOUBLE),
    TEST_ENTRY("%- #08.6e", .d = 0.456, DOUBLE),
    TEST_ENTRY("%- #08.6e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%- #08.6e", .d = -123.0, DOUBLE),
    TEST_ENTRY("%- #08.6e", .d = -0.456, DOUBLE),
    TEST_ENTRY("%+e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%+e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%+e", .d = 0, DOUBLE),
    TEST_ENTRY("%+e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%+e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%+ e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%#e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%#e", .d = 123.0, DOUBLE),
    TEST_ENTRY("%#e", .d = 0, DOUBLE),
    TEST_ENTRY("%#0- 5.2e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%#.0e", .d = 123.456, DOUBLE),
    TEST_ENTRY("%#.0e", .d = 123.0, DOUBLE),
    TEST_ENTRY("%#.0e", .d = 0, DOUBLE),
    TEST_ENTRY("%#.0e", .d = -69, DOUBLE),
    TEST_ENTRY("% e", .d = 123.456, DOUBLE),
    TEST_ENTRY("% e", .d = 123.456, DOUBLE),
    TEST_ENTRY("% e", .d = 0, DOUBLE),
    TEST_ENTRY("% e", .d = -123.456, DOUBLE),
    TEST_ENTRY("% +e", .d = 123.456, DOUBLE),
    TEST_ENTRY("% +e", .d = 0, DOUBLE),
    TEST_ENTRY("% +e", .d = -123.456, DOUBLE),
    TEST_ENTRY("%e", .d = (double)(2L << 50), DOUBLE),

    // %a
    TEST_ENTRY("%a", .d = 3.14, DOUBLE),
    TEST_ENTRY("%a", .d = -1, DOUBLE),
    TEST_ENTRY("%A", .d = 0.9999999999999999998, DOUBLE),
    TEST_ENTRY("%A", .d = -123.456, DOUBLE),
    TEST_ENTRY("%A", .d = -0.456, DOUBLE),
    TEST_ENTRY("%A", .d = -0.0001, DOUBLE),

    // %g
    TEST_ENTRY("%g", .d = NAN, DOUBLE),
    TEST_ENTRY("%g", .d = INFINITY, DOUBLE),
    TEST_ENTRY("%G", .d = -INFINITY, DOUBLE),

    #ifdef WRAP_ENTRIES
};
    #endif

#endif
